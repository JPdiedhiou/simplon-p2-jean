RTC Module API draft


classes:
RtcModule - a singleton instance that attaches a handler for RTMSG_xxxx messages
    to chatd. Contains Call objects. Needs a user handler to notify about new
    incoming call requests.
Call - an object that represents a call. Contains Session objects. Needs a user
    handler to notify about events related to the call as a whole, i.e. not
    specific to a particular Session.
Session - an object that represents a single p2p session within a call. Needs a
    user handler to notify about events specific to that session

RtcModule:
  constructor:
    RtcModule(chatd, crypto, globalHandler)
        chatd - the chatd client instance
        crypto - an object containing all crypto functions needed for the fingerprint
          authentication and random number generation.
        globalHandler - event handler for global events. See GlobalEventHandler for 
        details
    startCall(chatid, av, handler) - Sends a call request in the chatroom specified
          by chatid.
        av - bit flags that determine whether we will send audio and/or video.
            Audio is specified by bit 0, video by bit 1. For convenience, you can
            use an OR combination of Av.Audio and Av.Video instead of the numeric flags.
        handler - the CallEventHandler that will handle all further events on that
          call
        returns - a Call object or null if there is already an ongoing call in the room.
    joinCall(chatid, av, handler) - joins an ongoing call in the chatroom specified by
      chatid. The params are the same as in startCall().
      
GlobalEventHandler:
   onCallIncoming(call) - called when an incoming call request is received,
     and a Call object is created
       call - the newly created Call object
       returns - the calback must return a CallEventHandler, which handles
          all events related to that call. See below for details
     Note that you can't immediately answer or reject the call from within this
     callback. It must be done asynchronously, so you cal use setTimeout() with
     a zero timeout to do that.
     onAnotherCall(existingCall, callerInfo) - called when an incoming call is received
     while there is already another call in the _same_ chatroom. There cannot be
     more than one call at the same time in a given chatroom, so this callback is designed
     to let the user decide whether to replace the existing call or not.
     Return \c true to hang up the existing call (via hangup()) and process the
     incoming call request (onCallIncoming() will be generated), or \c false to
     send a busy signal to the new call request.
     existingCall - the existing call that is to be replaced. 
     callerInfo - object with information about the call request
     NOTE: When a second call is received in another chatroom, onAnotherCall() is not called
     and there is no special handling whatsoever, as the RtcModule supports multiple simultaneous
     calls in different chatroom. It is up to the user to decide whether and how to hang up the
     existing call.
   isGroupChat(chatid) - returns whether the chat, identified by chatid, is a
     group chat (returns true) or 1on1 chat(returns false). This callback will be
     called whenever the module needs to determine whether a chat is group or not.
     Calls in group and 1on1 chatrooms are handled slightly differently:
     - if a hangup is received from a callee, and the call is not group,
       it is rejected at the caller and destroyed. If it is a group call, a received
        hangup has no effect.
     - if a p2p session gets broken and the call is a group call, an attempt is made
         to re-establish the p2p session.
     Note that a 1on1 call can still be joined from other devices of any of the
     2 users. However, the above rules for 1on1 calls would still apply - if a 
     session gets disconnected and it is not the only session active, it will not
     be retried. If it is the only active session, the call will be destroyed.
Call:
  answer() - answers an incoming call
  hangup() - hangs up a call, in any state. If the call is unanswered and
    incoming, rejects it. If the call is unanswered and outgoing, cancels it.
  muteUnmute(av) - mutes/unmutes the audio/video streams sent.
      av - a bitmask of 2 bits - one for audio, the other for video. The state of 
      the bits specifies whether we send audio/video respectively. Returns the actual
      state of the local stream (i.e. the user may tr y to unmute video on an audio-only
      stream, in which case the returned state will still have video muted).
CallEventHandler:
  onStateChange(CallState) - the call changed state. See CallState enum for details.
  onDestroy(Term) - called just before the call is destroyed. You must remove any
      references to the Call object.
    Term - the terminate reason code. If the peer initiated the termination, the
    Term.kPeer bit is set. See the Term enum for details.
  onNewSession(sess) - a new p2p session has just been created on that call.
      sess - the Session object
      returns - a SessionEventHandler that will handle all events specific to that
          session  
  onLocalMediaRequest() - called when getUserMedia() is about to be called
     and the user will be asked for permissions for camera/mic access. This can
     be used to display hint on the screen to notify the user that she needs to
     allow access. Note that this will be called only when camera/mic are not
     already in use by RtcModule. For any subsequent calls/sessions, no access
     permissions are needed. When all active calls have ended, and later there is
     a new call, this callback will be called and permissions will be asked again.
       call - the Call object for which user media is requested
   onLocalMediaObtained(stream) - called when getUserMedia() completed. This can be used
       to remove the hint displayed in onUserMediaRequest() 
   onLocalMediaError(error) - called when there was an error getting user media.     
       This callback must return a bool specifying whether to continue with the call
       or to hang it up.
   onRingOut(user) - called when we are initiating a call and a peer user's client receives
       the request and starts ringing. This is called once per receiving user.
   onCallStarting() - the call has been answered/joined and is about to start.
   onCallStarted() - called when for the first time a session has its webrtc peer media
   connection established (the session's RTCPeerConnection.iceConnectionState becomes
   'connected')

Session:
  peer - the userid of the peer
  peerClient - the clientid of the peer
SessionEventHandler:
   onStateChange(SessionState) - the session changed state. See SessionState for
       details.
   onDestroy(Term, [msg]) - the session is about to be destroyed. You should remove any
   references to it.
       Term - the reason for the session termination. If the termination is initiated
       by the peer, the Term.kPeer bit is set. See the Term enum for details.
       msg - optional error message.
   onRemoteStreamAdded(mediaURL) - The peer will send a stream to us on that stream URL.
   onPeerMute(av) -  the peer changed what to send (audio and/or video)
       av - what will be sent from now on - audio and/or video

